#!/usr/bin/env bash

# # use `hub` as git wrapper
# # http://defunkt.github.com/hub/
# hub_path=$(which hub)
# if (($ + commands[hub])); then
# 	alias git=$hub_path
# fi

alias g="git"

# Codex GPT function
cdx() {
    if [[ "$1" == "update" ]]; then
        npm install -g @openai/codex@latest
    else
        codex -m gpt-5 -c model_reasoning_effort="high" --search "$@"
    fi
}

# one letter aliases w/o options
alias gb="git branch"
alias ga="git add"
alias gf="git fetch"
alias gg="git grep"
alias gl="git log"
alias gm="git merge"
alias gr="git remote"
alias gs="git status"
alias gw="git whatchanged"

# merge
alias gmc="git merge --continue"
alias gma="git merge --abort"

# pull
alias gpl="git pull"

# adding
alias gaa="git add ."
alias gap="git add --patch"
alias gau="git add --update"

# branches
alias gbe="git branch --edit-description"
alias gbd="git branch -d"
alias gbdd="git branch -D"
alias gch="git checkout"
alias gcb="git checkout -b"
alias gbm="git branch --merged"
alias gbnm="git branch --no-merged"

# cherry-pick
alias gchp="git cherry-pick"

# clone
alias gcl="git clone"

# commit
alias gc="git commit -am"
alias gcm="git commit --amend --message"

# diff
alias gdt="git difftool"
alias gd="git diff --color"
alias gitfix="git diff --name-only | uniq | xargs code"

# grep
alias ggl="git grep --line-number"
alias ggg="git grep --break --heading --line-number"

# log
alias glg="git log --graph"
alias glo="git log --oneline"

# changelog
alias changelog="git log --pretty=format:"%h %ad%x09%an%x09%s" --date=short"

# push
alias gp="git push"
alias gpu="git push -u origin"
alias undopush="git push -f origin HEAD^:main"

# rebase
alias gre="git rebase"

# remote
alias gra="git remote add origin"

# stash
alias gst="git stash"
alias gsa="git stash apply"
alias gsp="git stash pop"
alias gsd="git stash drop"

# view issues
alias gbi="git browse -- issues"

# pull-request
alias gpr="git pull-request"

# --- Optional legacy coreutils/ripgrep overrides ---
# Prefer modern, guarded aliases in ~/.config/zsh/aliases.zsh.
# To enable the legacy aggressive overrides below, export:
#   ENABLE_LEGACY_GNU_ALIASES=1
if [[ "${ENABLE_LEGACY_GNU_ALIASES:-0}" != "1" ]]; then
    return
fi

# better ls (requires eza)
alias ls="eza --icons --group-directories-first"
alias ll="eza -la --icons --group-directories-first"
alias la="eza -a --icons --group-directories-first"
alias lt="eza --tree --level=2 --icons"
alias l="eza -l --icons --group-directories-first"

###
# coreutils
###

alias skim="/Applications/Skim.app/Contents/MacOS/Skim"

# files output
alias tail="gtail -F" # follows log rotations
alias split="gsplit"
alias csplit="gcsplit"

# summarizing files
alias sum="gsum"
alias cksum="cksum"
alias md5sum="gmd5sum"
alias sha1sum="gsha1sum"

# operating on fields
alias cut="gcut"
alias paste="gpaste"
alias join="gjoin"

# basic ops
alias cp="gcp -v"
alias mv="gmv -v"
alias rm="grm -v"
alias shred="gshred"

# special filetypes
alias link="glink"
alias unlink="gunlink"
alias mkdir="gmkdir -v"
alias rmdir="grmdir -v"
alias readlink="greadlink"

# changing file attributes
alias chmod="gchmod -v"
alias chown="gchown -v"
alias chgrp="gchgrp -v"
alias touch="gtouch"

# disk usage
alias df="gdf"
alias du="gdu"
alias stat="gstat"
alias sync="gsync"
alias truncate="gtruncate"

# printing text
alias echo="gecho"
alias printf="gprintf"

# redirection
alias tee="gtee"

# the rest
# GNU tools (optional - macOS versions work fine for most uses)
# Uncomment if you specifically need GNU versions
# alias awk="gawk"
alias grep="rg"

# alias ln="gln"  # Commented - macOS ln works fine
alias ln-sym="ln -nsf" # symlinks

# findutils
alias find="fd"
alias locate="glocate"
alias updatedb="gupdatedb"
alias xargs="gxargs"

# binutils
alias addr2line="gaddr2line"
alias ar="gar"
alias c++filt="gc++filt"
alias dlltool="gdlltool"
alias nlmconv="gnlmconv"
alias nm="gnm"
alias objcopy="gobjcopy"
alias objdump="gobjdump"
alias ranlib="granlib"
alias readelf="greadelf"
alias size="gsize"
alias strings="gstrings" # lol
alias strip="gstrip"

# tar
alias tar="gtar"

# sed
alias sed="gsed"

# which
alias which="gwhich"

# npm/pnpm/yarn aliases
alias nin="npm init"
alias ni="npm i"
alias nig="npm i -g"
alias nis="npm i --save"
alias nid="npm i --save-dev"
alias nu="npm uninstall"
alias nus="npm uninstall --save"
alias nud="npm uninstall --save-dev"
alias nup="npm update"
alias nug="npm upgrade"
alias nr="npm run"
alias nt="npm test"
alias ndd="npm dedupe"
alias npr="npm prune"
alias nod="npm outdated"
alias nrb="npm rebuild"
alias nls="npm list"
alias nlsg="npm list -g"
alias ncc="npm cache clean"
alias nf="npm cache clean && rm -rf node_modules && npm i"

# Modern shortcuts
alias tf="terraform"
alias k="kubectl"
alias d="docker"
alias dc="docker-compose"

# shortcuts
alias md="mkdir"
alias t="touch"
alias x="exit"
alias c="clear"
alias o='open -a Marta .'
# alias o="open ."
alias vi="nvim"
alias vim="nvim"
alias v="nvim"
alias x+="chmod +x"
alias restart="sudo reboot"
alias bye="sudo shutdown -r now"
alias get="curl -O -L"
alias vi="vim"
alias reload="source ~/.zshrc"

# use ccat
alias cat="bat"

# python - using UV now
alias pip="uv pip"
alias python="python3"
alias py="python3"

# make a pdf
alias mergepdf="/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py"

# spotlight
alias spotoff="sudo mdutil -a -i off"
alias spoton="sudo mdutil -a -i on"

# remove DS_Store
alias rm_ds="find . -name '*.DS_Store' -type f -ls -delete"

# show/hide files
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# show/hide desktop items
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# kill all chrome tabs to free memory
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

# lock scren when going afk
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

# 🔇
alias stfu="osascript -e 'set volume output muted true'"

# remove cached xcode build data
alias xcodepurge="rm -rf ~/Library/Developer/Xcode/DerivedData"

# use gitignore.io cmd line tool
gi() {
    curl -L -s https://www.gitignore.io/api/$@
}

# create a remote repo
create-repo() {
    # Get user input
    echo "Enter name for new repo"
    read REPONAME
    echo "Do you want to make it private? (y/n)"
    read -r -n PRIVATE_ANSWER

    if [[ "$PRIVATE_ANSWER" =~ ^[Yy]$ ]]; then
        PRIVATE_TF=true
    else
        PRIVATE_TF=false
    fi

    # Curl some json to the github API oh damn we so fancy
    curl -u gretzky https://api.github.com/user/repos -d "{\"name\": \"$REPONAME\", \"private\": $PRIVATE_TF}" >/dev/null

    # first commit
    git init 1>/dev/null
    gi macos,visualstudiocode >>.gitignore 1>/dev/null
    print_success ".gitignore added"
    git add . 1>/dev/null
    git commit -m "initial commit" 1>/dev/null
    print_success "initial commit"
    git remote add origin https://github.com/gretzky/$REPONAME.git 1>/dev/null
    git push -u origin main --force 1>/dev/null

    sleep 0.5
    print_success "\nRepo created"
    print_in_cyan "You can view your new repo at https://github.com/gretzky/$REPONAME.git"
}

# make new dir and cd into it
take() {
    mkdir -p $1
    cd $1
}
alias tk="take"

# animated gifs from any video
# https://gist.github.com/SlexAxton/4989674
gifify() {
    if [[ -n "$1" ]]; then
        if [[ $2 == '--good' ]]; then
            ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
            time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - >"$1.gif"
            rm out-static*.png
        else
            ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 >"$1.gif"
        fi
    else
        echo "✋  proper usage: gifify <input_movie.mov>. You DO need to include extension."
    fi
}

# defaulting tree
# tree() {
# 	tree -aC -I '.git|node_modules|build|dist' --dirsfirst "$@"
# }

# 🗑
emptytrash() {
    print_header "🗑  Emptying trashes..."
    sudo rm -rfv /Volumes/*/.Trashes 1>/dev/null
    rm -rfv ~/.Trash/* 1>/dev/null
    sudo rm -v /private/var/vm/sleepimage 1>/dev/null

}

pyenv() {
    local command
    command="${1:-}"
    if [ "$#" -gt 0 ]; then
        shift
    fi

    case "$command" in
    rehash | shell)
        eval "$(pyenv "sh-$command" "$@")"
        ;;
    *)
        command pyenv "$command" "$@"
        ;;
    esac
}

# FZF

alias fp='fzf --preview "bat --style=numbers --color=always --line-range=:500 {}" --preview-window=right:60% --height=40% --layout=reverse --border --bind "ctrl-o:execute(v{})"'

# # fd - cd to selected directory
# fd() {
#     local dir
#     dir=$(find ${1:-.} -path '*/\.*' -prune \
#         -o -type d -print 2>/dev/null | fzf +m) &&
#         cd "$dir"
# }
#
# fh - Removed: This function is now defined in .fzf-functions as fzf-git-history

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
    IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0 --preview="bat --color=always {}"))
    [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Searches files using ag, lets you fuzzy-pick a result with fzf, and opens the matched file in Vim.
vg() {
    local file

    file="$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1}')"

    if [[ -n $file ]]; then
        vim $file
    fi
}

# fdr - cd to selected parent directory
fdr() {
    local declare dirs=()
    get_parent_dirs() {
        if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
        if [[ "${1}" == '/' ]]; then
            for _dir in "${dirs[@]}"; do echo $_dir; done
        else
            get_parent_dirs $(dirname "$1")
        fi
    }
    local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
    cd "$DIR"
}

# cf - fuzzy cd from anywhere
# ex: cf word1 word2 ... (even part of a file name)
# zsh autoload function
cf() {
    local file

    file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

    if [[ -n $file ]]; then
        if [[ -d $file ]]; then
            cd -- $file
        else
            cd -- ${file:h}
        fi
    fi
}

# cdf - cd into the directory of the selected file
cdf() {
    local file
    local dir
    file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

fif() {
    if [ ! "$#" -gt 0 ]; then
        echo "Need a string to search for!"
        return 1
    fi
    local file
    file="$(rga --ignore-case --files-with-matches --no-messages "$@" |
        fzf --preview="rga --ignore-case --pretty --context 10 '$@' {}")"
    file=$(echo "$result" | cut -d: -f1)
    line=$(echo "$result" | cut -d: -f2)
    if [[ -n $file ]]; then
        nvim "$file"
    fi
}

# Copies the selected file’s path to the macOS clipboard using pbcopy
f() { find . -type f -not -path '*/.*' | fzf | pbcopy; }

fzf-help() {
    local choice
    choice=$(
        cat <<EOF | fzf --prompt="FZF Help ❯ " --height=~50% --layout=reverse --border
🔍  Search command history              | history | fzf | cut -c 8-
📝  Open file with preview in editor   | fzf --preview 'bat --style=numbers --color=always --line-range=:500 {}' | xargs nvim
📂  Fuzzy cd into directory            | fd -t d | fzf | xargs cd
📁  Zoxide fuzzy dir jump              | zi
🔎  Search file contents via ripgrep   | rg "search-term" | fzf
📜  Show recent git branches           | git branch --sort=-committerdate | fzf | xargs git checkout
🔄  Search and re-run shell history    | Ctrl+R
EOF
    )
    [[ -n "$choice" ]] && echo "$choice" | cut -d'|' -f2- | xargs -0 printf "\n%s\n"
}

function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}
